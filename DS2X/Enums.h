#pragma once

// Exported as: DOCKBAR_TYPE
enum eDockbarType {
	DOCKBAR_SCREEN = 0,
	DOCKBAR_SCREEN_X = 1,
	DOCKBAR_SCREEN_Y = 2,
	DOCKBAR_SCREEN_X_SWITCH_Y = 3,
	DOCKBAR_WINDOW = 4,
};

enum eAction {

};

enum eActionOrigin {

};

enum eActive {

};

enum eActor {

};

enum eActorAlignment {

};

enum eAggro {

};

enum eAggroType {
	AT_NONE = 0,
	AT_DAMAGE_MELEE = 1,
	AT_DAMAGE_RANGED = 2,
	AT_DAMAGE_COMBAT_MAGIC = 3,
	AT_DAMAGE_NATURE_MAGIC = 4,
	AT_ENEMY_CAST_HEAL = 5,
	AT_ENEMY_LOOTED_ITEM = 6,
	AT_ENEMY_USE_MAGIC = 7,
	AT_ENEMY_USE_POWER = 8,
	AT_ENEMY_USE_POTION = 9,
	AT_ENEMY_KILLED_FRIEND = 10,
	AT_ENEMY_DAMAGED_LEADER = 11,
	AT_ENEMY_TAUNT = 12,
	AT_RACE_HUMAN_RACE = 13,
	AT_RACE_HALF_GIANT_RACE = 14,
	AT_RACE_ELF_RACE = 15,
	AT_RACE_DRYAD_RACE = 16,
	AT_RACE_PET_RACE = 17,
	AT_GENDER_MALE = 18,
	AT_GENDER_FEMALE = 19,
};

enum eAlignment {
	ALIGN_DEFAULT = 0,
	ALIGN_UP_LEFT = 1,
	ALIGN_UP_RIGHT = 2,
	ALIGN_DOWN_LEFT = 3,
	ALIGN_DOWN_RIGHT = 4,
};

enum eAlteration {
	ALTER_INVALID = 0,
	ALTER_GENERIC = 1,
	ALTER_MAX_LIFE = 2,
	ALTER_LIFE = 3,
	ALTER_LIFE_TIMED_RESTORE = 4,
	ALTER_LIFE_RECOVERY_UNIT = 5,
	ALTER_LIFE_RECOVERY_PERIOD = 6,
	ALTER_MAX_MANA = 7,
	ALTER_MANA = 8,
	ALTER_MANA_TIMED_RESTORE = 9,
	ALTER_MANA_RECOVERY_UNIT = 10,
	ALTER_MANA_RECOVERY_PERIOD = 11,
	ALTER_MANA_COST = 12,
	ALTER_MELEE_SPEED = 13,
	ALTER_RANGED_SPEED = 14,
	ALTER_CAST_SPEED = 15,
	ALTER_MOVE_SPEED = 16,
	ALTER_STRENGTH = 17,
	ALTER_INTELLIGENCE = 18,
	ALTER_DEXTERITY = 19,
	ALTER_MELEE = 20,
	ALTER_RANGED = 21,
	ALTER_NATURE_MAGIC = 22,
	ALTER_COMBAT_MAGIC = 23,
	ALTER_ALL_PASSIVE_SKILLS = 24,
	ALTER_MELEE_PASSIVE_SKILLS = 25,
	ALTER_RANGED_PASSIVE_SKILLS = 26,
	ALTER_NATURE_MAGIC_PASSIVE_SKILLS = 27,
	ALTER_COMBAT_MAGIC_PASSIVE_SKILLS = 28,
	ALTER_SKILL_SUITE = 29,
	ALTER_MONSTER_LEVEL = 30,
	ALTER_STRENGTH_TO_INTELLIGENCE = 31,
	ALTER_STRENGTH_TO_DEXTERITY = 32,
	ALTER_INTELLIGENCE_TO_DEXTERITY = 33,
	ALTER_MELEE_TO_RANGED = 34,
	ALTER_MELEE_TO_NATURE_MAGIC = 35,
	ALTER_MELEE_TO_COMBAT_MAGIC = 36,
	ALTER_RANGED_TO_NATURE_MAGIC = 37,
	ALTER_RANGED_TO_COMBAT_MAGIC = 38,
	ALTER_NATURE_MAGIC_TO_COMBAT_MAGIC = 39,
	ALTER_CAN_CAST = 40,
	ALTER_MELEE_RELOAD_DELAY = 41,
	ALTER_RANGED_RELOAD_DELAY = 42,
	ALTER_CAST_RELOAD_DELAY = 43,
	ALTER_SACRIFICE = 44,
	ALTER_HEALING_BONUS_PERCENT = 45,
	ALTER_SUMMON_DAMAGE_BONUS_PERCENT = 46,
	ALTER_SUMMON_ATTACK_SPEED_BONUS_PERCENT = 47,
	ALTER_MARK_RENDING = 48,
	ALTER_MARK_AGONY = 49,
	ALTER_MARK_HARVEST = 50,
	ALTER_MARK_FIRE = 51,
	ALTER_ATTACK_CHANCE_TO_CAST_TEMPLATE = 52,
	ALTER_DEFEND_CHANCE_TO_CAST_TEMPLATE = 53,
	ALTER_MELEE_DAMAGE_MIN = 54,
	ALTER_MELEE_DAMAGE_MAX = 55,
	ALTER_MELEE_DAMAGE_PERCENT = 56,
	ALTER_MELEE_DAMAGE_SOURCE_PERCENT = 57,
	ALTER_RANGED_DAMAGE_MIN = 58,
	ALTER_RANGED_DAMAGE_MAX = 59,
	ALTER_RANGED_DAMAGE_PERCENT = 60,
	ALTER_RANGED_DAMAGE_SOURCE_PERCENT = 61,
	ALTER_CMAGIC_DAMAGE_MIN = 62,
	ALTER_CMAGIC_DAMAGE_MAX = 63,
	ALTER_CMAGIC_DAMAGE_PERCENT = 64,
	ALTER_CMAGIC_DAMAGE_SOURCE_PERCENT = 65,
	ALTER_NMAGIC_DAMAGE_MIN = 66,
	ALTER_NMAGIC_DAMAGE_MAX = 67,
	ALTER_NMAGIC_DAMAGE_PERCENT = 68,
	ALTER_NMAGIC_DAMAGE_SOURCE_PERCENT = 69,
	ALTER_ICE_DAMAGE_PERCENT = 70,
	ALTER_FIRE_DAMAGE_PERCENT = 71,
	ALTER_LIGHTNING_DAMAGE_PERCENT = 72,
	ALTER_DEATH_DAMAGE_PERCENT = 73,
	ALTER_CRITICAL_DAMAGE_BONUS_PERCENT = 74,
	ALTER_CRITICAL_DAMAGE_MELEE_BONUS_PERCENT = 75,
	ALTER_CRITICAL_CHANCE_MELEE_BONUS_PERCENT = 76,
	ALTER_CRITICAL_DAMAGE_RANGED_BONUS_PERCENT = 77,
	ALTER_CRITICAL_CHANCE_RANGED_BONUS_PERCENT = 78,
	ALTER_CUSTOM_DAMAGE = 79,
	ALTER_CUSTOM_DAMAGE_MELEE = 80,
	ALTER_CUSTOM_DAMAGE_RANGED = 81,
	ALTER_CUSTOM_DAMAGE_LIGHTNING = 82,
	ALTER_CUSTOM_DAMAGE_ICE = 83,
	ALTER_CUSTOM_DAMAGE_FIRE = 84,
	ALTER_CUSTOM_DAMAGE_DEATH = 85,
	ALTER_CUSTOM_DAMAGE_CHANCE = 86,
	ALTER_CUSTOM_DAMAGE_CHANCE_MELEE = 87,
	ALTER_CUSTOM_DAMAGE_CHANCE_RANGED = 88,
	ALTER_POWER_DAMAGE_PERCENT = 89,
	ALTER_MAGIC_POWER_DAMAGE_PERCENT = 90,
	ALTER_LIFE_STEAL = 91,
	ALTER_LIFE_STEAL_MELEE = 92,
	ALTER_LIFE_STEAL_RANGED = 93,
	ALTER_MANA_STEAL = 94,
	ALTER_MANA_STEAL_MELEE = 95,
	ALTER_MANA_STEAL_RANGED = 96,
	ALTER_LIFE_BONUS = 97,
	ALTER_MANA_BONUS = 98,
	ALTER_PIERCING_DAMAGE_CHANCE = 99,
	ALTER_PIERCING_DAMAGE_CHANCE_MELEE = 100,
	ALTER_PIERCING_DAMAGE_CHANCE_RANGED = 101,
	ALTER_PIERCING_DAMAGE_CHANCE_AMOUNT = 102,
	ALTER_PIERCING_DAMAGE_CHANCE_AMOUNT_MELEE = 103,
	ALTER_PIERCING_DAMAGE_CHANCE_AMOUNT_RANGED = 104,
	ALTER_PIERCING_DAMAGE_RANGE = 105,
	ALTER_PIERCING_DAMAGE_RANGE_MELEE = 106,
	ALTER_PIERCING_DAMAGE_RANGE_RANGED = 107,
	ALTER_RANGED_ATTACK_MANA_DAMAGE = 108,
	ALTER_RANGED_ATTACK_MANA_DRAIN = 109,
	ALTER_MELEE_ATTACK_MANA_DAMAGE = 110,
	ALTER_MELEE_ATTACK_MANA_DRAIN = 111,
	ALTER_DAMAGE_BONUS_TO_UNDEAD = 112,
	ALTER_DAMAGE_BONUS_TO_TYPE = 113,
	ALTER_CHANCE_TO_HIT = 114,
	ALTER_CHANCE_TO_HIT_MELEE = 115,
	ALTER_CHANCE_TO_HIT_RANGED = 116,
	ALTER_CHANCE_FOR_AIMING_ERROR = 117,
	ALTER_AIMING_ERROR = 118,
	ALTER_EXPERIENCE_GAINED = 119,
	ALTER_MELEE_EXP_PERCENT = 120,
	ALTER_RANGED_EXP_PERCENT = 121,
	ALTER_CMAGIC_EXP_PERCENT = 122,
	ALTER_NMAGIC_EXP_PERCENT = 123,
	ALTER_ARMOR = 124,
	ALTER_ARMOR_PERCENT = 125,
	ALTER_ARMOR_SOURCE_PERCENT = 126,
	ALTER_INVINCIBILITY = 127,
	ALTER_BLOCK_DAMAGE = 128,
	ALTER_BLOCK_MELEE_DAMAGE = 129,
	ALTER_BLOCK_RANGED_DAMAGE = 130,
	ALTER_BLOCK_COMBAT_MAGIC_DAMAGE = 131,
	ALTER_BLOCK_NATURE_MAGIC_DAMAGE = 132,
	ALTER_BLOCK_PIERCING_DAMAGE = 133,
	ALTER_BLOCK_CUSTOM_DAMAGE = 134,
	ALTER_BLOCK_PART_DAMAGE = 135,
	ALTER_BLOCK_PART_MELEE_DAMAGE = 136,
	ALTER_BLOCK_PART_RANGED_DAMAGE = 137,
	ALTER_BLOCK_PART_COMBAT_MAGIC_DAMAGE = 138,
	ALTER_BLOCK_PART_NATURE_MAGIC_DAMAGE = 139,
	ALTER_BLOCK_PART_PIERCING_DAMAGE = 140,
	ALTER_BLOCK_PART_CUSTOM_DAMAGE = 141,
	ALTER_CHANCE_TO_BLOCK_MELEE_DAMAGE = 142,
	ALTER_CHANCE_TO_BLOCK_RANGED_DAMAGE = 143,
	ALTER_CHANCE_TO_BLOCK_CMAGIC_DAMAGE = 144,
	ALTER_CHANCE_TO_BLOCK_NMAGIC_DAMAGE = 145,
	ALTER_CHANCE_TO_BLOCK_MELEE_DAMAGE_AMOUNT = 146,
	ALTER_CHANCE_TO_BLOCK_RANGED_DAMAGE_AMOUNT = 147,
	ALTER_CHANCE_TO_BLOCK_CMAGIC_DAMAGE_AMOUNT = 148,
	ALTER_CHANCE_TO_BLOCK_NMAGIC_DAMAGE_AMOUNT = 149,
	ALTER_CHANCE_TO_DODGE_HIT = 150,
	ALTER_CHANCE_TO_DODGE_HIT_MELEE = 151,
	ALTER_CHANCE_TO_DODGE_HIT_RANGED = 152,
	ALTER_REFLECT_DAMAGE = 153,
	ALTER_REFLECT_FIXED_DAMAGE = 154,
	ALTER_REFLECT_DAMAGE_CHANCE = 155,
	ALTER_REFLECT_PIERCING_DAMAGE = 156,
	ALTER_REFLECT_PIERCING_DAMAGE_CHANCE = 157,
	ALTER_REFLECT_DAMAGE_TO_SELF = 158,
	ALTER_MANA_SHIELD = 159,
	ALTER_DAMAGE_TO_MANA_PERCENT = 160,
	ALTER_ATTACK_CHANCE_TO_PENETRATE = 161,
	ALTER_GOLD_VALUE = 162,
	ALTER_REQUIREMENTS = 163,
	ALTER_MAGIC_FIND_CHANCE = 164,
	ALTER_POWER_RELOAD = 165,
	ALTER_GOLD_DROPPED = 166,
	ALTER_FREEZE_CHANCE = 167,
	ALTER_MELEE_RESISTANCE = 168,
	ALTER_RANGED_RESISTANCE = 169,
	ALTER_LIGHTNING_RESISTANCE = 170,
	ALTER_ICE_RESISTANCE = 171,
	ALTER_FIRE_RESISTANCE = 172,
	ALTER_DEATH_RESISTANCE = 173,
	ALTER_NON_ELEMENTAL_RESISTANCE = 174,
	ALTER_PHYSICAL_RESISTANCE = 175,
	ALTER_ELEMENTAL_RESISTANCE = 176,
	ALTER_MAGICAL_RESISTANCE = 177,
	ALTER_STATE_RESISTANCE = 178,
	ALTER_DEBUFF_RESISTANCE = 179,
	ALTER_BUFF_RESISTANCE = 180,
	// New!
	ALTER_MAX_LIFE_PERCENT = 181,
	ALTER_MAX_MANA_PERCENT = 182,
};

enum eAnim {

};

// Not exported.
enum eAnimChore {
	CHORE_INVALID = 0,
	CHORE_NONE = 1,
	CHORE_ERROR = 2,
	CHORE_DEFAULT = 3,
	CHORE_WALK = 4,
	CHORE_DIE = 5,
	CHORE_DEFEND = 6,
	CHORE_ATTACK = 7,
	CHORE_MAGIC = 8,
	CHORE_FIDGET = 9,
	CHORE_ROTATE = 10,
	CHORE_OPEN = 11,
	CHORE_CLOSE = 12,
	CHORE_MISC = 13,
	CHORE_RAILMOVE = 14,
};

enum eAnimEvent {

};

// Not exported.
enum eAnimStance {
	AS_DEFAULT = 0,
	AS_PLAIN = 1,
	AS_SINGLE_MELEE = 2,
	AS_SINGLE_MELEE_AND_SHIELD = 3,
	AS_TWO_HANDED_MELEE = 4,
	AS_TWO_HANDED_SWORD = 5,
	AS_STAFF = 6,
	AS_BOW_AND_ARROW = 7,
	AS_MINIGUN = 8,
	AS_SHIELD_ONLY = 9,
	AS_DUAL_WIELD = 10,
	AS_THROWABLE = 11,
};

enum eAttack {

};

enum eAttackClass {

};

enum eAxis {

};

enum eAxisHint {

};

enum eCamera {

};

enum eCameraInterp {

};

enum eCameraOrder {

};

enum eCombat {

};

enum eCreate {

};

enum eDamage {

};

enum eDamageType {

};

enum eDebug {

};

enum eDebugHudOptions {

};

// Exported as: EDGE_TYPE
enum eEdgeType {
	EDGE_TOP = 0,
	EDGE_BOTTOM = 1,
	EDGE_LEFT = 2,
	EDGE_RIGHT = 3,
	EDGE_HALF_CIRCLE_TOP = 4,
	EDGE_HALF_CIRCLE_BOTTOM = 5,
};

enum eDifficulty {
	DIFFICULTY_EASY = 0,
	DIFFICULTY_MEDIUM = 1,
	DIFFICULTY_HARD = 2,
};

enum eDrop {

};

enum eEntry {

};

enum eEntryType {
	NONE = 0,
	QUEST_ITEM = 1,
	BOOK = 2,
	MAP = 3,
	SCROLL = 4,
	CHANT = 5,
};

enum eEquip {

};

enum eEquipSlot {

};

enum eFade {

};

enum eFadeType {
	FT_NONE = 0,
	FT_ALPHA = 1,
	FT_BLACK = 2,
	FT_IN = 3,
	FT_INSTANT = 4,
	FT_IN_INSTANT = 5,
};

enum eFocus {

};

enum eGame {

};

enum eGamespy {

};

enum eGamespyEvent {
	GSE_ERROR = 0,
	GSE_PROGRESS_UPDATE = 1,
	GSE_PROFILE_SIGNIN_SUCCESS = 2,
	GSE_PROFILE_SIGNIN_FAILED = 3,
	GSE_GAMEROOM_ENTER = 4,
	GSE_GAMEROOM_LEAVE = 5,
	GSE_BUDDYLIST_PROFILE = 6,
	GSE_BUDDYLIST_PROFILE_INFO = 7,
	GSE_BUDDYLIST_STATUS_UPDATE = 8,
	GSE_BUDDYLIST_BUDDY_MESSAGE = 9,
	GSE_BUDDYLIST_GAME_INVITE = 10,
	GSE_BUDDYLIST_BUDDY_REQUEST = 11,
	GSE_BUDDYLIST_SEARCH_RESULT = 12,
	GSE_ACCOUNT_NEW_ACCOUNT = 13,
	GSE_ACCOUNT_NEW_PROFILE = 14,
	GSE_ACCOUNT_NICKNAME_LIST = 15,
	GSE_ACCOUNT_PROFILE_CONNECT = 16,
	GSE_ACCOUNT_PROFILE_DISCONNECT = 17,
	GSE_ACCOUNT_PEER_CONNECT = 18,
	GSE_ACCOUNT_PEER_DISCONNECT = 19,
	GSE_ACCOUNT_CDKEY_VALIDATION = 20,
	GSE_ACCOUNT_NICKNAME_ERROR = 21,
	GSE_STAGINGROOM_GAME_STARTED = 22,
	GSE_STAGINGROOM_PLAYER_READY = 23,
	GSE_STAGINGROOM_PLAYER_CHANGE_NICKNAME = 24,
	GSE_STAGINGROOM_PLAYER_JOINED = 25,
	GSE_STAGINGROOM_PLAYER_LEFT = 26,
	GSE_STAGINGROOM_PLAYER_INFO = 27,
	GSE_STAGINGROOM_PLAYER_KICKED = 28,
	GSE_STAGINGROOM_PLAYER_ENUM = 29,
	GSE_STAGINGROOM_PLAYER_FLAGS_CHANGED = 30,
	GSE_STAGINGROOM_PLAYER_OPTION_CHANGED = 31,
	GSE_STAGINGROOM_ROOM_CREATED = 32,
	GSE_STAGINGROOM_ROOM_JOINED = 33,
	GSE_STAGINGROOM_ROOM_MESSAGE = 34,
	GSE_STAGINGROOM_ROOM_MODE_CHANGED = 35,
	GSE_STAGINGROOM_ROOM_KEY_CHANGED = 36,
	GSE_STAGINGROOM_ROOM_NAME_CHANGED = 37,
	GSE_STAGINGROOM_ROOM_PRIVATE_MESSAGE = 38,
	GSE_LISTGAME_START = 39,
	GSE_LISTGAME_END = 40,
	GSE_GAMELIST_GAME_ADD = 41,
	GSE_GAMELIST_GAME_REMOVE = 42,
	GSE_GAMELIST_GAME_UPDATE = 43,
	GSE_GAMELIST_PLAYER_CHANGE_NICKNAME = 44,
	GSE_GAMELIST_PLAYER_JOINED = 45,
	GSE_GAMELIST_PLAYER_LEFT = 46,
	GSE_GAMELIST_PLAYER_INFO = 47,
	GSE_GAMELIST_PLAYER_KICKED = 48,
	GSE_GAMELIST_PLAYER_ENUM = 49,
	GSE_GAMELIST_PLAYER_FLAGS_CHANGED = 50,
	GSE_GAMELIST_PLAYER_KEY_CHANGED = 51,
	GSE_GAMELIST_PLAYER_PRIVATE_MESSAGE = 52,
	GSE_GAMELIST_ROOM_CREATED = 53,
	GSE_GAMELIST_ROOM_JOINED = 54,
	GSE_GAMELIST_ROOM_MESSAGE = 55,
	GSE_GAMELIST_ROOM_MODE_CHANGED = 56,
	GSE_GAMELIST_ROOM_KEY_CHANGED = 57,
	GSE_GAMELIST_ROOM_NAME_CHANGED = 58,
	GSE_GAMELIST_ROOM_PRIVATE_MESSAGE = 59,
	GSE_CHAT_LIST_ROOMS = 60,
	GSE_CHAT_KEY_CHANGED = 61,
	GSE_CHAT_USER_LIST = 62,
	GSE_CHAT_USER_MODE_CHANGED = 63,
	GSE_CHAT_USER_CHANGED_NICK = 64,
	GSE_CHAT_USER_PARTED = 65,
	GSE_CHAT_USER_JOINED = 66,
	GSE_CHAT_USER_KICKED = 67,
	GSE_CHAT_CHANNEL_MODE_CHANGED = 68,
	GSE_CHAT_CHANNEL_TOPIC_CHANGED = 69,
	GSE_CHAT_CHANNEL_MESSAGE = 70,
	GSE_CHAT_CHANNEL_ENTERED = 71,
	GSE_GROUPROOM_NEW_ROOM = 72,
	GSE_PEER_PLAYER_MESSAGE = 73,
	GSE_PEER_PLAYER_PRIVATE_MESSAGE = 74,
	GSE_AUTOMATCH_STATUS = 75,
	GSE_AUTOMATCH_RESULT = 76,
	GSE_PERSIST_UPLOAD_COMPLETE = 77,
	GSE_PERSIST_DOWNLOAD_COMPLETE = 78,
	GSE_PERSIST_PARTYLIST_COMPLETE = 79,
	GSE_PERSIST_AUTHENTICATION = 80,
	GSE_BACKEEND_VALIDATE_RESULT = 81,
	GSE_PATCH_CHECK_RESULT = 82,
	GSE_PATCH_DOWNLOAD_PROGRESS = 83,
	GSE_PATCH_DOWNLOAD_COMPLETE = 84,
};

enum eGo {

};

enum eGoBitType {
	GOBIT_DEFAULT = 0,
	GOBIT_PERSIST_WITH_CHARACTER = 1,
};

enum eInventory {

};

enum eInventoryLocation {
	IL_HAND_1 = 0,
	IL_HAND_2 = 1,
	IL_SPELL_1 = 2,
	IL_SPELL_2 = 3,
	IL_SPELL_3 = 4,
	IL_SPELL_4 = 5,
	IL_SPELL_5 = 6,
	IL_SPELL_6 = 7,
	IL_SPELL_7 = 8,
	IL_SPELL_8 = 9,
	IL_SPELL_9 = 10,
	IL_SPELL_10 = 11,
	IL_INVALID = 12,
	IL_ALL = 13,
	IL_ALL_ACTIVE = 14,
	IL_ALL_SPELLS = 15,
	IL_MAIN = 16,
	IL_STASIS = 17,
};

enum eItem {

};

enum eItemSkillType {

};

enum eJob {

};

enum eJobAbstractType {
	JAT_INVALID = 0,
	JAT_NONE = 1,
	JAT_ATTACK_OBJECT_MELEE = 2,
	JAT_ATTACK_OBJECT_RANGED = 3,
	JAT_ATTACK_POSITION_MELEE = 4,
	JAT_ATTACK_POSITION_RANGED = 5,
	JAT_BRAIN = 6,
	JAT_CAST = 7,
	JAT_CAST_POSITION = 8,
	JAT_CAST_POWER = 9,
	JAT_CAST_POWER_POSITION = 10,
	JAT_CHARGE_OBJECT = 11,
	JAT_COLLECT_LOOT = 12,
	JAT_DIE = 13,
	JAT_DO_SE_COMMAND = 14,
	JAT_DRINK = 15,
	JAT_DROP = 16,
	JAT_EQUIP = 17,
	JAT_FACE = 18,
	JAT_FIDGET = 19,
	JAT_FLEE_FROM_OBJECT = 20,
	JAT_FOLLOW = 21,
	JAT_GAIN_CONSCIOUSNESS = 22,
	JAT_GET = 23,
	JAT_GIVE = 24,
	JAT_GUARD = 25,
	JAT_HIDE = 26,
	JAT_JUMP = 27,
	JAT_KNOCKBACK = 28,
	JAT_LISTEN = 29,
	JAT_MOVE = 30,
	JAT_PATROL = 31,
	JAT_SLIDE = 32,
	JAT_STARTUP = 33,
	JAT_STARTUP_REVEAL = 34,
	JAT_STOP = 35,
	JAT_TALK = 36,
	JAT_TELEPORT = 37,
	JAT_UNCONSCIOUS = 38,
	JAT_USE = 39,
	// Skrit defined.
	JAT_PAUSE = 40,
	JAT_PLAY_ANIM = 41,
	JAT_ENGAGE = 42,
	JAT_PLAY_BATTLE_YELL = 43,
	JAT_PLAY_CAUTIOUS_ATTACK = 44,
	JAT_PLAY_CAUTIOUS_RANGED_ATTACK = 45,
	JAT_PLAY_RANGED_FLEE = 46,
	JAT_PLAY_LEADER_GUARD = 47,
	JAT_PLAY_MOB_ATTACK = 48,
	JAT_PLAY_CHARGE = 49,
	JAT_PLAY_HIDE_FLANK = 50,
	JAT_PLAY_THIEF = 51,
	JAT_PLAY_ZARAMOTH = 52,
	JAT_PLAY_SUICIDE_BOMBER = 53,
	JAT_PLAY_FLAME_EFFIGY = 54,
	JAT_PLAY_THRALL_CHAMPION = 55,
	JAT_PARTY_FOLLOW = 56,
};

enum eJobAttribute {
	JA_NONE = 0,
	JA_PASSIVE = 1,
	JA_TIMID = 2,
	JA_AGGRESSIVE = 3,
	JA_SUICIDAL = 4,
	JA_UNDEAD = 5,
	JA_INSECT = 6,
	JA_ANIMAL = 7,
	JA_PRIMITIVE = 8,
	JA_CIVILIZED = 9,
	JA_ADVANCED = 10,
	JA_OVERWHELMED = 11,
	JA_SMALLER = 12,
	JA_SAME = 13,
	JA_LARGER = 14,
	JA_OVERWHELMING = 15,
	JA_RANGED = 16,
	JA_MELEE = 17,
	JA_CAUTIOUS = 18,
	JA_CHARGE = 19,
	JA_FLANKS = 20,
	JA_LEADER = 21,
	JA_MOB_ATTACK = 22,
	JA_RANGED_FLEE = 23,
	JA_THIEF = 24,
	JA_SUICIDE_BOMBER = 25,
	JA_ZARAMOTH = 26,
	JA_FLAME_EFFIGY = 27,
	JA_THRALL_CHAMPION = 28,
};

enum eJobResult {
	JR_INVALID = 0,
	JR_UNKNOWN = 1,
	JR_OK = 2,
	JR_FAILED = 3,
	JR_FAILED_NO_PATH = 4,
	JR_FAILED_NO_PATH_TRY_AGAIN = 5,
	JR_FAILED_BAD_PARAMS = 6,
	JR_FAILED_LEFT_FRUSTUM = 7,
};

enum eLife {

};

enum eLifeState {
	LS_IGNORE = 0,
	LS_ALIVE_CONSCIOUS = 1,
	LS_ALIVE_UNCONSCIOUS = 2,
	LS_DEAD_NORMAL = 3,
	LS_DECAY_FRESH = 4,
	LS_DECAY_BONES = 5,
	LS_DECAY_DUST = 6,
	LS_GONE = 7,
};

enum eLoot {

};

enum eMagic {

};

enum eMini {

};

enum eMood {

};

enum eMoodRoomType {
	RT_GENERIC = 0,
	RT_PADDEDCELL = 1,
	RT_ROOM = 2,
	RT_BATHROOM = 3,
	RT_LIVINGROOM = 4,
	RT_STONEROOM = 5,
	RT_AUDITORIUM = 6,
	RT_CONCERTHALL = 7,
	RT_CAVE = 8,
	RT_ARENA = 9,
	RT_HANGAR = 10,
	RT_CARPETEDHALLWAY = 11,
	RT_HALLWAY = 12,
	RT_STONECORRIDOR = 13,
	RT_ALLEY = 14,
	RT_FOREST = 15,
	RT_CITY = 16,
	RT_MOUNTAINS = 17,
	RT_QUARRY = 18,
	RT_PLAIN = 19,
	RT_PARKINGLOT = 20,
	RT_SEWERPIPE = 21,
	RT_UNDERWATER = 22,
	RT_DRUGGED = 23,
	RT_DIZZY = 24,
	RT_PSYCHOTIC = 25,
};

enum eMovement {

};

enum ePClass {

};

enum ePContentType {
	PT_ARMOR = 0,
	PT_WEAPON = 1,
	PT_AMULET = 2,
	PT_RING = 3,
	PT_SPELL = 4,
	PT_SCROLL = 5,
	PT_POTION = 6,
	PT_SPELLBOOK = 7,
	PT_REAGENT = 8,
	PT_RECIPE = 9,
	PT_BODY = 10,
	PT_HELM = 11,
	PT_GLOVES = 12,
	PT_BOOTS = 13,
	PT_SHIELD = 14,
	PT_MELEE = 15,
	PT_RANGED = 16,
	PT_POTION_HEALTH = 17,
	PT_POTION_MANA = 18,
	PT_CMAGIC = 19,
	PT_NMAGIC = 20,
	PT_INVALID = 21,
};

enum ePhysics {

};

enum ePixel {

};

enum ePixelBlend {
	PB_NONE = 0,
	PB_ZERO = 1,
	PB_ONE = 2,
	PB_SRCCOLOR = 3,
	PB_INVSRCCOLOR = 4,
	PB_SRCALPHA = 5,
	PB_INVSRCALPHA = 6,
	PB_DESTALPHA = 7,
	PB_INVDESTALPHA = 8,
	PB_DESTCOLOR = 9,
	PB_INVDESTCOLOR = 10,
	PB_SRCALPHASAT = 11,
	PB_BOTHSRCALPHA = 12,
	PB_BOTHINVSRCALPHA = 13,
};

enum ePlayer {

};

enum ePos {

};

enum ePosHint {
	PH_NONE = 0,
	PH_LINEAR = 1,
	PH_EASE_BETWEEN = 2,
	PH_EASE_OUT = 3,
	PH_EASE_IN = 4,
};

enum eQPlace {

};

enum eQuery {

};

enum eQueryTrait {

};

enum eQuest {

};

enum eQuestState {
	QSTATE_NONE = 0,
	QSTATE_DEACTIVATED = 1,
	QSTATE_ACTIVATED = 2,
	QSTATE_VIEWED = 3,
	QSTATE_COMPLETED = 4,
};

enum eRibbon {

};

enum eRibbonAlign {
	RA_NONE = 0,
	RA_CAMERA_XAXIS = 1,
	RA_CAMERA_YAXIS = 2,
	RA_CAMERA_ZAXIS = 3,
	RA_TOTARGET_XAXIS = 4,
	RA_TOTARGET_YAXIS = 5,
};

enum eRoom {

};

enum eStanding {

};

enum eStandingOrders {
	SO_NONE = 0,
	SO_AGGRESSIVE = 1,
	SO_GUARD = 2,
	SO_MIRROR = 3,
	SO_WAIT = 4,
};

enum eGameStat {

};

enum eTarget {

};

enum eTargetTypeFlags {

};

enum eTexture {

};

enum eTextureOp {
	TO_NONE = 0,
	TO_DISABLE = 1,
	TO_ARG1 = 2,
	TO_ARG2 = 3,
	TO_MODULATE = 4,
	TO_MODULATE2X = 5,
	TO_MODULATE4X = 6,
	TO_ADD = 7,
	TO_ADDSIGNED = 8,
	TO_ADDSIGNED2X = 9,
	TO_SUBTRACT = 10,
	TO_ADDSMOOTH = 11,
	TO_BLENDDIFFUSEALPHA = 12,
	TO_BLENDTEXTUREALPHA = 13,
	TO_BLENDFACTORALPHA = 14,
	TO_BLENDTEXTUREALPHAPM = 15,
	TO_BLENDCURRENTALPHA = 16,
	TO_PREMODULATE = 17,
	TO_MODULATEALPHA_ADDCOLOR = 18,
	TO_MODULATECOLOR_ADDALPHA = 19,
	TO_MODULATEINVALPHA_ADDCOLOR = 20,
	TO_MODULATEINVCOLOR_ADDALPHA = 21,
	TO_BUMPENVMAP = 22,
	TO_BUMPENVMAPLUMINANCE = 23,
	TO_DOTPRODUCT3 = 24,
	TO_MULTIPLYADD = 25,
};

enum eTuning {

};

enum eTuningGridDoor {
	TGD_TOP = 0,
	TGD_BOTTOM = 1,
	TGD_LEFT = 2,
	TGD_RIGHT = 3,
	TGD_FORWARD = 4,
	TGD_BACKWARD = 5,
};

enum eUIMessage {
	MSG_NONE = 0,
	MSG_ONINVISIBLE = 1,
	MSG_ONVISIBLE = 2,
	MSG_ONLBUTTONDOWN = 3,
	MSG_ONLBUTTONUP = 4,
	MSG_ONRBUTTONDOWN = 5,
	MSG_ONRBUTTONUP = 6,
	MSG_ONMBUTTONDOWN = 7,
	MSG_ONMBUTTONUP = 8,
	MSG_ONBUTTONPRESS = 9,
	MSG_ONRBUTTONPRESS = 10,
	MSG_ONROLLOVER = 11,
	MSG_ONROLLOFF = 12,
	MSG_ONCHECK = 13,
	MSG_ONUNCHECK = 14,
	MSG_ONUNCHECKED = 15,
	MSG_ONFORCECHECK = 16,
	MSG_ONFORCEUNCHECK = 17,
	MSG_ONCHECKMIDSTATE = 18,
	MSG_ONLBUTTONDOWNCHECKED = 19,
	MSG_ONLBUTTONUPCHECKED = 20,
	MSG_ONROLLOVERCHECKED = 21,
	MSG_ONROLLOFFCHECKED = 22,
	MSG_ONLBUTTONDOWNMIDSTATE = 23,
	MSG_ONLBUTTONUPMIDSTATE = 24,
	MSG_ONROLLOVERMIDSTATE = 25,
	MSG_ONROLLOFFMIDSTATE = 26,
	MSG_ONGLOBALLBUTTONUP = 27,
	MSG_ONGLOBALLBUTTONUPOFF = 28,
	MSG_ONGLOBALLBUTTONDOWN = 29,
	MSG_ONGLOBALRBUTTONUP = 30,
	MSG_ONGLOBALRBUTTONUPOFF = 31,
	MSG_ONGLOBALRBUTTONDOWN = 32,
	MSG_ONGLOBALMBUTTONUP = 33,
	MSG_ONGLOBALMBUTTONDOWN = 34,
	MSG_ONKEYDOWN = 35,
	MSG_ONKEYUP = 36,
	MSG_ONKEYPRESS = 37,
	MSG_CHAR = 38,
	MSG_ONITEMACTIVATE = 39,
	MSG_ONITEMDEACTIVATE = 40,
	MSG_DEACTIVATE_SWITCH = 41,
	MSG_ONDEACTIVATEITEMS = 42,
	MSG_ONITEMPLACE = 43,
	MSG_ONSTATECHANGE = 44,
	MSG_ONACTIVATEMENU = 45,
	MSG_ONMENUSELECT = 46,
	MSG_CALCULATESLIDERSIZE = 47,
	MSG_INCREMENT_SLIDER = 48,
	MSG_DECREMENT_SLIDER = 49,
	MSG_ONLDOUBLECLICK = 50,
	MSG_ONRDOUBLECLICK = 51,
	MSG_ONMDOUBLECLICK = 52,
	MSG_GLOBALLDOUBLECLICK = 53,
	MSG_GLOBALRDOUBLECLICK = 54,
	MSG_GLOBALMDOUBLECLICK = 55,
	MSG_ONWHEELUP = 56,
	MSG_ONWHEELDOWN = 57,
	MSG_ONEDITSELECT = 58,
	MSG_ONEDITESCAPE = 59,
	MSG_ONEDITHASFOCUS = 60,
	MSG_ONEDITLOSTFOCUS = 61,
	MSG_ONEDITDELETE = 62,
	MSG_ONEDITTAB = 63,
	MSG_ONEDITARROWUP = 64,
	MSG_ONEDITARROWDOWN = 65,
	MSG_ONEDITPASTEERROR = 66,
	MSG_ONSLIDERLOSTFOCUS = 67,
	MSG_ONCREATED = 68,
	MSG_ONDESTROYED = 69,
	MSG_ONSHOW = 70,
	MSG_ONHIDE = 71,
	MSG_ONFADEOUT = 72,
	MSG_ONSTARTANIM = 73,
	MSG_ONANIMCOMPLETE = 74,
	MSG_ACTIVATECURSOR = 75,
	MSG_ONDRAG = 76,
	MSG_ONREMOVEITEM = 77,
	MSG_ONEXIT = 78,
	MSG_ONCOMBOEXPAND = 79,
	MSG_ONEXPENDED = 80,
	MSG_ONCOLLAPSED = 81,
	MSG_ONSELECT = 82,
	MSG_ONKEYSELECT = 83,
	MSG_ONCONTEXT = 84,
	MSG_ONENTER = 85,
	MSG_ONESCAPE = 86,
	MSG_ONCHANGE = 87,
	MSG_ONCLICKDELAY = 88,
	MSG_ONRESETCLICKDELAY = 89,
	MSG_DISABLE = 90,
	MSG_ENABLE = 91,
	MSG_ONELEMENTROLLOVER = 92,
	MSG_ONELEMENTROLLOFF = 93,
	MSG_ONLISTENERMOVE = 94,
	MSG_ONINSERTITEM = 95,
	MSG_ONBEGINDRAG = 96,
	MSG_ONENDDRAG = 97,
	MSG_ONSWITCHSUCCESS = 98,
};

enum eUIWindow {

};

enum eUsage {

};

enum eVoice {

};

enum eVoiceSound {
};

enum eWeapon {

};

enum eWorld {

};

enum eWorldEvent {
	// General custom messages.
	WE_USER_DAMAGE_RELAY = 0,
	WE_USER_OBJECT_RELAY = 1,
	WE_USER_OBJECT_ACTIVATE = 2,
	WE_USER_OBJECT_DEACTIVATE = 3,
	// Tree boss custom messages.
	WE_USER_QUERY_TREE_SHIELD_HP = 4,
	WE_USER_REPORT_TREE_SHIELD_HP = 5,
	WE_USER_MONSTER_LANDED = 6,
	WE_USER_TREE_SHOOT = 7,
	WE_USER_TREE_STOMP = 8,
	WE_USER_TREE_ABSORBED = 9,
	WE_USER_TREE_BUILDSHIELD = 10,
	WE_USER_TREE_INTERRUPTED = 11,
	WE_USER_TREE_SHOOT_HIT = 12,
	WE_USER_TREE_ACTION_ENDED = 13,
	WE_USER_TREE_REGENERATE_ENDED = 14,
	WE_USER_TREE_HIDE_ENDED = 15,
	WE_USER_TREE_INTERRUPTED_ENDED = 16,
	WE_USER_TREE_MELEE_ENDED = 17,
	WE_USER_TREE_MELEE_TELEGRAPH_ENDED = 18,
	WE_USER_TREE_RANGE_ENDED = 19,
	WE_USER_TREE_RANGE_TELEGRAPH_ENDED = 20,
	WE_USER_TREE_HATCHLING_GENERATED = 21,
	WE_USER_TREE_HATCHLING_DIED = 22,
	WE_USER_TREE_HATCHLING_INIT = 23,
	WE_USER_TREE_MAKE_SHIELD_VISIBLE = 24,
	WE_USER_TREE_FRAG_COCOON = 25,
	WE_USER_TREE_DAMAGE_RELAY = 26,
	// Snake boss custom messages.
	WE_USER_SNAKE_BREATH = 27,
	WE_USER_SNAKE_TRIPLE_EFFECT = 28,
	// Dragon boss custom messages.
	WE_USER_DRAGON_NIS_BEGIN = 29,
	WE_USER_DRAGON_ATTACK = 30,
	WE_USER_DRAGON_ATTACK_AIR = 31,
	WE_USER_DRAGON_ATTACK_DONE = 32,
	WE_USER_DRAGON_BALLISTA_FIRE = 33,
	WE_USER_DRAGON_BALLISTA_MOVE_LEFT = 34,
	WE_USER_DRAGON_BALLISTA_MOVE_RIGHT = 35,
	WE_USER_DRAGON_FIRE_STARTED = 36,
	WE_USER_DRAGON_FIRE_OUT = 37,
	// Dark Mage boss custom messages.
	WE_USER_DARK_MAGE_ACTION_FINISHED = 38,
	WE_USER_DARK_MAGE_SHIELD_ON = 39,
	WE_USER_DARK_MAGE_SHIELD_OFF = 40,
	WE_USER_DARK_MAGE_INIT_SHARD = 41,
	WE_USER_DARK_MAGE_SHARD_DIED = 42,
	WE_USER_DARK_MAGE_UBER_HIT = 43,
	WE_USER_DARK_MAGE_START_UBER = 44,
	WE_USER_DARK_MAGE_START_STUN = 45,
	WE_USER_DARK_MAGE_SHIELD_MOVE = 46,
	WE_USER_DARK_MAGE_ELEMENTAL = 47,
	WE_USER_DARK_MAGE_DIED = 48,
	// Triple Dark Mage custom messages.
	WE_USER_DARK_MAGE_REQUEST_DOUBLE_ATTACK = 49,
	WE_USER_DARK_MAGE_DOUBLE_REQUEST_MASTER = 50,
	WE_USER_DARK_MAGE_CONFIRM_DOUBLE_ATTACK = 51,
	WE_USER_DARK_MAGE_START_DOUBLE = 52,
	WE_USER_DARK_MAGE_FRIEND1_DIED = 53,
	WE_USER_DARK_MAGE_FRIEND2_DIED = 54,
	WE_USER_DARK_MAGE_JOIN_SUMMON = 55,
	WE_USER_DARK_MAGE_LEFT_SUMMON = 56,
	WE_USER_DARK_MAGE_SUMMON_OVER = 57,
	WE_USER_DARK_MAGE_REQUEST_SUMMON = 58,
	WE_USER_DARK_MAGE_REQUEST_UBER = 59,
	WE_USER_DARK_MAGE_JOIN_UBER = 60,
	WE_USER_DARK_MAGE_UBER_INTERRUPTED = 61,
	WE_USER_DARK_MAGE_UBER_BUSY = 62,
	WE_USER_DARK_MAGE_UBER_DONE = 63,
	WE_USER_DARK_MAGE_SUMMON_CHECK_DISTANCE = 64,
	// ArchMage boss custom messages.
	WE_USER_ARCHMAGE_ACTION_FINISHED = 65,
	WE_USER_ARCHMAGE_ACTUATOR_SHIELD_ACTIVE = 66,
	WE_USER_ARCHMAGE_ACTUATOR_SHIELD_INACTIVE = 67,
	WE_USER_ARCHMAGE_ACTUATOR_SHIELD_KILLED = 68,
	WE_USER_ARCHMAGE_PROJECTILE_COLLIDE = 69,
	// Valdis boss custom messages.
	WE_USER_VALDIS_SPLIT_STARTED = 70,
	WE_USER_VALDIS_SPLIT_FINISHED = 71,
	WE_USER_VALDIS_SPLIT_INTERRUPTED = 72,
	WE_USER_VALDIS_ROCK_HAZARD = 73,
	WE_USER_VALDIS_BEAM_COLLISION = 74,
	WE_USER_VALDIS_TELEPORT = 75,
	WE_USER_VALDIS_ALTAR_FORCE_STAGE_1 = 76,
	WE_USER_VALDIS_NIS_ANIM_START = 77,
	// Mark of the Prisoner custom messages.
	WE_USER_START_PRISONER = 78,
	WE_USER_STOP_PRISONER = 79,
	WE_USER_HIT_PRISONER = 80,
	// Light ray puzzle custom messages.
	WE_USER_LP_REFLECTING = 81,
	WE_USER_LP_REFLECTED = 82,
	WE_USER_LP_REFRESH = 83,
	WE_USER_LP_REFRESH_END = 84,
	WE_USER_LP_RESET = 85,
	// Effect flipper custom message.
	WE_USER_FLIP_EFFECT = 86,
	// Tutorial custom messages.
	WE_USER_POWER_BRUTAL_ATTACK = 87,
	WE_USER_NPC_USE_POWER = 88,
	// Generator Pcontent Message for NPC Actors.
	WE_USER_GENERATE_PCONTENT = 89,
	// For the NIS with the commander at the castle.
	WE_USER_COMMANDER_KNOCKBACK = 90,
	// A3 mines.
	WE_USER_CART_ARRIVED = 91,
	// A3 Kalrathian Nexus Quest Staff.
	WE_USER_NEXUS_FIRE_ON = 92,
	WE_USER_NEXUS_COLD_ON = 93,
	WE_USER_NEXUS_EARTH_ON = 94,
	// Used by damage_tick_until_message.flick/ damage hazard accumulator.
	WE_USER_START_DAMAGE = 95,
	WE_USER_STOP_DAMAGE = 96,
	// Used by monster and NPC brains.
	WE_USER_ENABLE_MIND = 97,
	WE_USER_DISABLE_MIND = 98,
	// Messages used by the indicate emitter to switch between different overhead icons.
	WE_USER_INDICATE_EMITTER_SWITCH = 99,
	WE_USER_INDICATE_EMITTER_ON = 100,
	WE_USER_INDICATE_EMITTER_OFF = 101,
	WE_USER_INDICATE_EMITTER_INFO = 102,
	WE_USER_INDICATE_EMITTER_TASK_ACTIVE = 103,
	// Door.
	WE_USER_SECOND_DOOR = 104,
	// Semi-generic
	WE_USER_EFFECT_START = 105,
	// Message sent when the reveal job is complete (used by revealing mini-bosses to show mini-boss effect).
	WE_USER_REVEAL = 106,
	// Used to let the "mark" spells know when an arrow has collided with a target.
	WE_USER_MARK_TARGET = 107,
	WE_USER_DEACTIVATE_MARKS = 108,
	// Used by cmd_change_property_owner.skrit.
	WE_USER_SET_STATE1 = 109,
	WE_USER_SET_STATE2 = 110,
	// Flame effigy custom message.
	WE_USER_FLAMEON = 111,
	WE_USER_FLAME_EFFIGY_FIRE = 112,
};

enum eWorldState {
	WS_INVALID = 0,
	WS_ANY = 1,
	WS_INIT = 2,
	WS_INTRO = 3,
	WS_LOGO = 4,
	WS_MAIN_MENU = 5,
	WS_PRELOAD_INTRO = 6,
	WS_LOAD_MAP = 7,
	WS_LOADING_MAP = 8,
	WS_LOADED_MAP = 9,
	WS_LOADED_INTRO = 10,
	WS_WAIT_FOR_BEGIN = 11,
	WS_LOADING_SAVE_GAME = 12,
	WS_CREDITS = 13,
	WS_OPTIONS = 14,
	WS_DEINIT = 15,
	WS_RELOADING = 16,
	WS_GAME_ENDED = 17,
	WS_INGAME_MOVIE = 18,
	WS_TELEPORT = 19,
	WS_NIS = 20,
	WS_SP_MAIN_MENU = 21,
	WS_SP_INGAME_MENU = 22,
	WS_SP_CHARACTER_SELECT = 23,
	WS_SP_MAP_SELECT = 24,
	WS_SP_DIFFICULTY_SELECT = 25,
	WS_SP_VICTORY_SCREEN = 26,
	WS_SP_LOAD_GAME_SCREEN = 27,
	WS_SP_SAVE_GAME_SCREEN = 28,
	WS_SP_INGAME = 29,
	WS_SP_DEFEAT = 30,
	WS_SP_VICTORY = 31,
	WS_SP_OUTRO = 32,
	WS_MP_PROVIDER_SELECT = 33,
	WS_MP_INTERNET_GAME = 34,
	WS_MP_LAN_GAME = 35,
	WS_MP_MATCH_MAKER = 36,
	WS_MP_STAGING_AREA_SERVER = 37,
	WS_MP_STAGING_AREA_CLIENT = 38,
	WS_MP_CHARACTER_SELECT = 39,
	WS_MP_MAP_SELECT = 40,
	WS_MP_SAVE_GAME_SCREEN = 41,
	WS_MP_INGAME = 42,
	WS_MP_INGAME_JIP = 43,
	WS_MP_SESSION_LOST = 44,
};

// Exported as: JUSTIFICATION
enum eJustification {
	JUSTIFY_LEFT = 0,
	JUSTIFY_RIGHT = 1,
	JUSTIFY_CENTER = 2,
};

// Exported as: UI_ACTION
enum eUIAction {
	ACTION_SETRECT = 0,
	ACTION_SETNORMALIZEDRECT = 1,
	ACTION_SETVISIBLE = 2,
	ACTION_SHOWGROUP = 3,
	ACTION_LOADTEXTURE = 4,
	ACTION_LOADSTRETCHTEXTURES = 5,
	ACTION_SETUVCOORDS = 6,
	ACTION_SENDMESSAGE = 7,
	ACTION_PARENTMESSAGE = 8,
	ACTION_SETALPHA = 9,
	ACTION_ADDELEMENT = 10,
	ACTION_REMOVEELEMENT = 11,
	ACTION_NOTIFY = 12,
	ACTION_SETHOTSPOT = 13,
	ACTION_SETTEXT = 14,
	ACTION_SETGROUP = 15,
	ACTION_SETELEMENTHEIGHT = 16,
	ACTION_SETNUMSTATES = 17,
	ACTION_SETSTATE = 18,
	ACTION_SHOWMENU = 19,
	ACTION_ACTIVATEMENU = 20,
	ACTION_ACTIVATEITEM = 21,
	ACTION_SETCOLOR = 22,
	ACTION_PLAYSOUND = 23,
	ACTION_KEYLISTEN = 24,
	ACTION_KEYPRESS = 25,
	ACTION_RECTANIMATION = 26,
	ACTION_ALPHAANIMATION = 27,
	ACTION_FLASHANIMATION = 28,
	ACTION_STOPANIMATION = 29,
	ACTION_CLOCKANIMATION = 30,
	ACTION_SETSTATUS = 31,
	ACTION_LOADANIMATEDTEXTURE = 32,
	ACTION_CONSUMEINPUT = 33,
	ACTION_EDITSELECT = 34,
	ACTION_SHIFT_X = 35,
	ACTION_SHIFT_Y = 36,
	ACTION_SETROLLOVERHELP = 37,
	ACTION_VERTEXCOLOR = 38,
	ACTION_COMMAND = 39,
	ACTION_CALL = 40,
	ACTION_SETSLIDERBUTTON = 41,
	ACTION_LOADGRIDIMAGE = 42,
	ACTION_NONE = 43,
};

// Exported as: UI_CONTROL_TYPE
enum eUIControlType {
	UI_TYPE_WINDOW = 0,
	UI_TYPE_BUTTON = 1,
	UI_TYPE_CHECKBOX = 2,
	UI_TYPE_SLIDER = 3,
	UI_TYPE_LISTBOX = 4,
	UI_TYPE_RADIO_BUTTON = 5,
	UI_TYPE_BUTTON_MULTISTAGE = 6,
	UI_TYPE_TEXT = 7,
	UI_TYPE_CURSOR = 8,
	UI_TYPE_DOCKBAR = 9,
	UI_TYPE_GRIDBOX = 10,
	UI_TYPE_POPUPMENU = 11,
	UI_TYPE_ITEM = 12,
	UI_TYPE_ITEMSLOT = 13,
	UI_TYPE_INFOSLOT = 14,
	UI_TYPE_STATUS_BAR = 15,
	UI_TYPE_EDIT_BOX = 16,
	UI_TYPE_COMBO_BOX = 17,
	UI_TYPE_LISTENER = 18,
	UI_TYPE_LISTREPORT = 19,
	UI_TYPE_CHAT_BOX = 20,
	UI_TYPE_TEXT_BOX = 21,
	UI_TYPE_DIALOG_BOX = 22,
	UI_TYPE_TAB = 23,
	UI_TYPE_LINE = 24,
	UI_TYPE_OBJECT_VIEW = 25,
	UI_TYPE_TREECTRL = 26,
	UI_TYPE_CONTAINER = 27,
};

// Exported as: UI_INPUT_TYPE
enum eUIInputType {
	TYPE_INPUT_NONE = 0,
	TYPE_INPUT_ALL = 1,
	TYPE_INPUT_MOUSE = 2,
	TYPE_INPUT_KEY = 3,
};

DefineFunction(ToString, 0x7a0150, const char*, Params(eDockbarType dockbarType), Args(dockbarType));
DefineFunction(ToString, 0x940991, const char*, Params(eAggroType aggroType), Args(aggroType));
DefineFunction(ToString, 0x7aaca0, const char*, Params(eAlignment alignment), Args(alignment));
DefineFunction(ToString, 0x931ae4, const char*, Params(eAlteration alteration), Args(alteration));
DefineFunction(ToString, 0x7adc70, const char*, Params(eEdgeType edgeType), Args(edgeType));
DefineFunction(ToString, 0x83c50c, const char*, Params(eDifficulty unk1), Args(unk1));
DefineFunction(ToString, 0x88732b, const char*, Params(eEntryType unk1), Args(unk1));
DefineFunction(ToString, 0x6d0e20, const char*, Params(eFadeType unk1), Args(unk1));
DefineFunction(ToString, 0x582aca, const char*, Params(eGamespyEvent unk1), Args(unk1));
DefineFunction(ToString, 0x95fcfe, const char*, Params(eGoBitType unk1), Args(unk1));
DefineFunction(ToString, 0x7ec9f5, const char*, Params(eInventoryLocation unk1), Args(unk1));
DefineFunction(ToString, 0x9409fd, const char*, Params(eJobAbstractType unk1), Args(unk1));
DefineFunction(ToString, 0x9409d6, const char*, Params(eJobAttribute unk1), Args(unk1));
DefineFunction(ToString, 0x93cbfc, const char*, Params(eJobResult unk1), Args(unk1));
DefineFunction(ToString, 0x7ec7a1, const char*, Params(eLifeState unk1), Args(unk1));
DefineFunction(ToString, 0x91cdf2, const char*, Params(eMoodRoomType unk1), Args(unk1));
DefineFunction(ToString, 0x7ec877, const char*, Params(ePContentType unk1), Args(unk1));
DefineFunction(ToString, 0x714eb0, const char*, Params(ePixelBlend unk1), Args(unk1));
DefineFunction(ToString, 0x6b7720, const char*, Params(ePosHint unk1), Args(unk1));
DefineFunction(ToString, 0x7ec7dd, const char*, Params(eQuestState unk1), Args(unk1));
DefineFunction(ToString, 0x714ef0, const char*, Params(eRibbonAlign unk1), Args(unk1));
DefineFunction(ToString, 0x8785c1, const char*, Params(eStandingOrders unk1), Args(unk1));
DefineFunction(ToString, 0x714e70, const char*, Params(eTextureOp unk1), Args(unk1));
DefineFunction(ToString, 0x88e37f, const char*, Params(eTuningGridDoor unk1), Args(unk1));
DefineFunction(ToString, 0x7add70, const char*, Params(eUIMessage unk1), Args(unk1));
DefineFunction(ToString, 0x848244, const char*, Params(eWorldEvent unk1), Args(unk1));
DefineFunction(ToString, 0x7d513c, const char*, Params(eWorldState unk1), Args(unk1));
DefineFunction(ToString, 0x760250, const char*, Params(eJustification unk1), Args(unk1));
DefineFunction(ToString, 0x7add10, const char*, Params(eUIAction unk1), Args(unk1));
DefineFunction(ToString, 0x7adbd0, const char*, Params(eUIControlType unk1), Args(unk1));
DefineFunction(ToString, 0x7adcd0, const char*, Params(eUIInputType unk1), Args(unk1));
